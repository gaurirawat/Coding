package revision;//https://practice.geeksforgeeks.org/problems/matrix-chain-multiplication/0//https://www.techiedelight.com/matrix-chain-multiplication/import  java.util.*;public class DP_gfg_matrix_chain_multiplication {    public static void main (String[] args) {        Scanner sc= new Scanner(System.in);        int t= Integer.parseInt(sc.nextLine());        while(t--!=0){            int len= Integer.parseInt(sc.nextLine());            int arr[]= new int[len];            String []st= sc.nextLine().split(" ");            for(int i=0; i<len;++i)                arr[i]=Integer.parseInt(st[i]);            len--;// now equal to the no of matrix            int dp[][]= new int[len][len];            System.out.println(matrixMultiplicationDP(dp, arr, 0, len-1));        }    }    public static int matrixMultiplicationDP(int dp[][], int arr[], int i, int j){        if(i>=j) return 0;        if(dp[i][j]!=0) return dp[i][j];        dp[i][j]=Integer.MAX_VALUE;        for(int k=i; k<j; ++k){            dp[i][j]= Math.min(dp[i][j],                    matrixMultiplicationDP(dp, arr, i, k)+ matrixMultiplicationDP(dp, arr, k+1, j)+                            arr[i]*arr[k+1]*arr[j+1]);//row of i matrix, column of k matrix and column of j matrix        }        return dp[i][j];    }    /*    public static int matrixMultiplication(int l, int r, int[]arr, int dp[][]){        if(l==r)            return 0;        if(dp[l][r]!=0)            return dp[l][r];        dp[l][r]=Integer.MAX_VALUE;        for(int i=l;i<r;++i){            dp[l][r]=Math.min(dp[l][r],matrixMultiplication(l,i,arr,dp)+matrixMultiplication(i+1,r,arr,dp)+arr[l]*arr[i+1]*arr[r+1]);        }        return dp[l][r];    }     */}