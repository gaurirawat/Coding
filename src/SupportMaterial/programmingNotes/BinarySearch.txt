BINARY SEARCH
FIRST AND LAST OCCURRENCE OF AN ELEMENT: IMPORTANT
FIND COUNT OF ELEMENT IN A SORTED ARRAY O(logn)
SEARCHING IN AN INFINITE ARRAY
SEARCH ELEMENT IN SORTED ARRAY ELSE RETURN INSERT POSITION
FIND MINIMUM IN A ROTATED ARRAY
SEARCH IN A ROTATED ARRAY
MATRIX:
    SEARCH ELEMENT IN A SORTED MATRIX WHERE FIRST ELEMENT OF EVERY ROW >= THAN LAST ELEMENT OF PREVIOUS ROW
    MATRIX MEDIAN
PAINTERS PARTITION PROBLEM

------------------------------------

A general thing. If we are making changes to both l and r then upper condition will most likely be l<=r.
Else the cond is l<r only when we are making changes to only pointer out of l and r. Also whenever we take (l<r)
condition always update l as mid+1(most likely) because otherwise in an example of [1,2] the mid will continue to come
as 0 and we will end up going in an infinite loop.


BINARY SEARCH

Approach:

Prob:
BSearch_lc_BS
https://leetcode.com/problems/binary-search/submissions/


A basic code for searching t in arr[].
    public int search(int[] arr, int t) {
        int l=0;
        int r=arr.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(t==arr[mid])
                return mid;
            else if(t>arr[mid])
                l=mid+1;
            else
                r=mid-1;
        }
        return -1;
    }
------------------------------------------------------------------------------------------------------------------------

FIRST AND LAST OCCURRENCE OF AN ELEMENT: IMPORTANT

Prob:
BSearch_lc_first_and_last_occurrence_of_element
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/

    //we return -1 from both searches if the element is not present in the array
    public int[] searchRange(int[] arr, int t) {
        int a[]=new int[2];
        Arrays.fill(a,-1);
        if(arr.length==0)return a;
        a[0]=findFirstIndex(arr,t);
        a[1]=findLastIndex(arr,t);
        return a;
    }

    public int findFirstIndex(int arr[],int t){
        int l=0,r=arr.length-1;
        int res=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(arr[mid]==t){
                res=mid;
                r=mid-1;
            }
            else if(arr[mid]>t)
                r=mid-1;
            else
                l=mid+1;
        }
        return res;
    }

    public int findLastIndex(int arr[],int t){
        int l=0,r=arr.length-1;
        int res=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(arr[mid]==t){
                res=mid;
                l=mid+1;
            }
            else if(arr[mid]<t)
                l=mid+1;
            else
                r=mid-1;
        }
        return res;
    }



    OR



    int l=0,r=nums.length-1;

    while(l<r){
        int mid=l+(r-l)/2;
        if(nums[mid]>=target)
            r=mid;
        else
            l=mid+1;
    }
    return r;

    l=0;r=nums.length-1;
    while(l<=r){
        int mid=l+(r-l)/2;
        if(nums[mid]<=target)
            l=mid+1;
        else
            r=mid-1;
    }
    return l-1;
    //the reason why the second case is not written like the first one is because if we write it as below, then this
    code looks correct but with an example of arr=[1,1], mid will be 0 and then it will go on an infinite loop.
    while(l<r){
        mid=...
        if(nums[mid]<=target)
            l=mid;
        else
            r=mid-1;
    }

--------------------------------------

FIND COUNT OF ELEMENT IN A SORTED ARRAY O(logn)

Algo:
find first and last occurrence of the element. now count= lastIndex-firstIndex +1
------------------------------------------------------------------------------------------------------------------------
SEARCHING IN AN INFINITE ARRAY

Take initial elements in list of size 1, last elem<target, elems=1
Take next elements in list of size 2, last elem<target, elems=1+2=3
Take next elements in list of size 4, last elem<target, elems=3+4=7
So basically keep inc size of list until size<10^9
After that fix the size and keep on inc elem count. When ever lastElem>target do Bsearch on the list.
------------------------------------------------------------------------------------------------------------------------

SEARCH ELEMENT IN SORTED ARRAY ELSE RETURN INSERT POSITION

Problem:
BSearch_ib_sorted_insert_position
https://www.interviewbit.com/problems/sorted-insert-position/

Approach:
the insert position has to be the leftmost position where the element is greater than the one being searched.
    while(l<=r){
        int mid=l+(r-l)/2;
        if(a.get(mid)>=b){
            index=mid;
            r=mid-1;
        }
        else
            l=mid+1;
    }
    return index;


    OR


    while(l<r){
        int mid=l+(r-l)/2;
        if(a.get(mid)>=b){
            r=mid;
        }
        else
            l=mid+1;
    }
    if(a.get(l)<b) return l+1;
    return l;

------------------------------------------------------------------------------------------------------------------------

FIND MINIMUM IN A ROTATED ARRAY

Prob:
BSearch_lc_minimum_in_rotated_array
https://www.interviewbit.com/problems/rotated-array/

Algo:
if mid element>right element then that mid lies inside the rotated array. So that element can't be minimum. we inc l by
mid+1;  but otherwise the element can be the min. so we just do r=mid;

    public class BSearch_lc_minimum_in_rotated_array {
        public int findMin(int[] nums) {
            if(nums.length<1)return 0;
            int l=0,r=nums.length-1;
            while(l<r){
                int mid=l+(r-l)/2;
                if(nums[mid]>nums[r])
                    l=mid+1;
                else
                    r=mid;
            }
            return nums[r];
        }
    }
--------------------------------------
SEARCH IN A ROTATED ARRAY.

Prob:
BSearch_ib_search_element_in_rotated_array
https://www.interviewbit.com/problems/rotated-sorted-array-search/

Algo:
find index of min element in the rotated array.
Now if min element element is present at 0th index or if element is less than last array element then search on right
array otherwise left array.
    if(r==0||k<=a[a.length-1])
        return binarySearch(r,a.length-1,k,a);
    else
        return binarySearch(0,r-1,k,a);
------------------------------------------------------------------------------------------------------------------------


MATRIX:

SEARCH ELEMENT IN A SORTED MATRIX WHERE FIRST ELEMENT OF EVERY ROW >= THAN LAST ELEMENT OF PREVIOUS ROW

Prob:
BSearch_ib_matrix_search
https://www.interviewbit.com/problems/matrix-search/

Approach:
First identify the row which will can contain the element.
if(no>last element of current row) goto next row else consider this row.
Now do binary search on the chosen row.

---------------------------------------

MATRIX MEDIAN

Prob:
BSearch_ib_matrix_median
https://www.interviewbit.com/problems/matrix-median/

Algo:
we find the max and median element in the array. Now the median element is present in the range of elements between min
and max. So we take the mid element and count the no. of elements that are smaller than that element. Now if the median
is supposed to be 5 and the next greater element is 10 then if our mid is 8 we may still get the expected no of smaller
elements. Hence that case has to be handled.

    public class BSearch_ib_matrix_median {
        public int findMedian(int[][] a) {
            if (a.length == 0) return 0;
            int max = Integer.MIN_VALUE;
            int min = Integer.MAX_VALUE;
            for (int i = 0; i < a.length; ++i) {
                min = Math.min(min, a[i][0]);
                max = Math.max(max, a[i][a[0].length - 1]);
            }
            int elem = 0;
            while (min < max) {
                int mid = min + (max - min) / 2;
                int c = 0;
                for (int i = 0; i < a.length; ++i) {
                    int pos = Arrays.binarySearch(a[i], mid);
                    if (pos < 0) pos = Math.abs(pos + 1);
                    else
                        while (pos < a[0].length && a[i][pos] <= mid)
                            pos++;
                    c += pos;
                }
                int exp = (a.length * a[0].length + 1) / 2;
                if (c < exp)
                    min = mid + 1;
                else
                    max = mid;
            }
            return min;
        }
    }

------------------------------------------------------------------------------------------------------------------------


PAINTERS PARTITION PROBLEM

Problem:
BSearch_ib_painters_partition_problem
https://www.interviewbit.com/problems/painters-partition-problem/

Consider it as the problem of dividing the array into k partitions such that the max sum of each partition is minimized.
n painters take k unit time to paint one block. list l contains no of blocks in each fence.

case 1: n=1.            return sum(list)*k
case 2: n>=list.size()  return max(list)*k
case 3: n<list.sizes() use binary search over no of blocks. l=max(list), r=sum(list).
    1. calculate mid. call getMaxBlocks(mid)
    2. getMaxTime(mid): if mid is insufficient. ie no-of-blocks-in-1-fence>mid or if n painters are all exhausted then
        return -1 else return the maxBlocks for the painter.
    3. now if we get return value as -1 then l=mid+1;
        otherwise save maxBlocks as ans and r=maxBlocks-1

------------------------------------------------------------------------------------------------------------------------
