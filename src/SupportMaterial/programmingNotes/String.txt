KMP ALGO:

Here we say that the needle has to be searched in the haysack. This is used for pattern matching. Makes use of longest
prefix that is also a suffix concept.

Ref:
https://www.youtube.com/watch?v=GTJr8OvyEVQ

Prob:
String_ib_KMP_implement_strstr
https://www.interviewbit.com/problems/implement-strstr/


    public class String_ib_KMP_implement_strstr {
        public int strStr(final String hh, final String nn) {
            if(hh==null||nn==null||hh.length()==0||nn.length()==0) return -1;
            char h[]=hh.toCharArray();
            char n[]=nn.toCharArray();
            int lps[]=new int[n.length];
            int i=0;
            for(int j=1;j<n.length;++j){
                while(n[j]!=n[i] && i!=0)
                    i=lps[i-1];
                if(n[j]==n[i])
                    lps[j]=i++ +1;
                else if(i==0)
                    lps[j]=0;
            }

            for(int j=0;j<h.length;++j){
                if(i==n.length) return j-n.length;
                while(n[i]!=h[j] && i!=0)
                    i=lps[i-1];
                if(n[i]==h[j]) ++i;
            }
            if(i==n.length) return h.length-n.length;
            return -1;
        }
    }


-----------------------
APPLICATION: ADD MIN CHAR TO FRONT TO MAKE STRING PALINDROMIC

Based on KMP itself.
Needle is the string. Haysack is the reverse of the string. We basically try to match how much of the actual string
matches with its reverse. Ie this much is the existing palindrome. For the remaining chars, elements have to be added.

Prob:
(to return no of additional char)
https://www.interviewbit.com/problems/minimum-characters-required-to-make-a-string-palindromic/

(to return resulting string)
https://leetcode.com/problems/shortest-palindrome/submissions/

    public class String_ib_min_char_to_make_string_palindrome {
        public int solve(String s) {
            if(s==null|| s.length()==0) return 0;
            char a[]=s.toCharArray();
            StringBuilder rev=new StringBuilder(s);
            rev=rev.reverse();
            char r[]=rev.toString().toCharArray();

            int lps[]=new int[a.length];
            int i=0;
            for(int j=1;j<a.length;++j){
                while(i!=0 && a[i]!=a[j])
                    i=lps[i-1];
                if(a[i]==a[j])
                    lps[j]=i++ +1;
                else
                    lps[i]=0;
            }

            i=0;
            for(int j=0;j<a.length;++j){
                while(i!=0 && a[i]!=r[j])
                    i=lps[i-1];
                if(a[i]==r[j])
                    i++;
            }
            return a.length-i;
        }
    }
------------------------------------------------------------------------------------------------------------------------
