STACK

Nearest smallest left/right element (NSL/NSR)

In certain cases we need to keep track of the nearest smallest element on the left. It is preferred to keep indexes instead of numbers

here we fill up -1 if there is no small element on the left side
        //nsl contains indexes of closest smaller element on the left
        for(int i=0;i<h.length;++i){
            while(top!=-1 && h[st[top]]>=h[i])
                top--;
            nsl[i]= top==-1?-1:st[top];
            st[++top]=i;
        }

here we fill up arr.length if there is no small element on the right side
        //nsr contains indexes of closest smaller element on the right
        top=-1;
        for(int i=h.length-1;i>=0;--i){
            while(top!=-1 && h[st[top]]>=h[i])
                top--;
            nsr[i]= top==-1?h.length:st[top];
            st[++top]=i;
        }

--------------------------------------------------------------------------------------------------

max area histogram

ref:
https://www.youtube.com/watch?v=J2X70jj_I1o&list=RDCMUC5WO7o71wvxMxEtLRkPhiQQ&start_radio=1&t=95
prob:
https://leetcode.com/problems/largest-rectangle-in-histogram/submissions/

This problem utilizes the above concept. We goto every histogram of ht[i] and try to expand it as much as we can on both sides.
ie, we first calc NSR, NSL and then-
For each i we calculate: area[i]=(nsr[i]-nsl[i]-1)*h[i]; and then return the maximum.

-------------------------------------------------------------------------------------------------