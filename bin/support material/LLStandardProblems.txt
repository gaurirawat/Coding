LL

K-REVERSE

//https://www.interviewbit.com/problems/k-reverse-linked-list/

list is reversed in ses of k. Ie reverse only k part of the list and call the func recursively for the next k set.
actual head of every set becomes last element which is supposed to point to the next set of elements.
Head of reversed list is returned.

public class LL_ib_k_reverse_LL {
    public ListNode reverseList(ListNode head, int k) {
        if(head==null||head.next==null||k<=1) return head;
        int c=0;
        ListNode node=head;
        ListNode curr=head,prev=null,next=null;
        while(c<k && curr!=null){
            c++;
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head.next=reverseList(curr,k);  //imp
        return prev;                    //imp
    }
------------------------------------------------------------------------------------------------------------------------

LOOP DETECTION

Take 2 pointers, slow fast. inc slow by 1, fast by 2.
if they match then there is a loop. Else the end would be reached.

    public static boolean detectLoop(Node head){
        if(head==null||head.next==null) return false;
        Node slow=head,fast=head;
        while(fast!=null){
            slow=slow.next;
            fast=fast.next==null?fast.next:fast.next.next;
            if(fast==slow)
                return true;
        }
        return false;
    }

------------------------------------------------------------------------------------------------------------------------