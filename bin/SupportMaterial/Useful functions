stack[i]=true;
        visited[i]=true;
        currel.add(i);    int arr[]= brr.clone();
Arrays.fill(arr, 10);// fills all cells of array with value 10
Arrays.fill(ar, 1, 5, 10);  // Fill from index 1 to index 4.
Arrays.stream(dp).forEach(a->Arrays.fill(a,-1));
System.out.println(Arrays.toString(candidates));

Arrays.sort(arr);
Arrays.sort(arr, Collections.reverseOrder()); //for this to work arr has to be of object type ie Integer instead of int

Arrays.binarySearch(arr, element, comparator)
Returns:
index of the search key, if present ; otherwise, (-(insertion point) ï¿½ 1).
if element has to be inserted at 0th position then returned position is -1.

Collections.reverse(Arrays.asList(a));
Collections.sort(al, Collections.reverseOrder());
al.toArray(new int[0][0]);

String[]s= x.split(" "); // separates space separated elements into different array cells.

Comparator<Employee> employeeNameComparator= Comparator.comparing(Employee::getName);//string
Comparator<Employee> employeeNameComparatorReversed = employeeNameComparator.reversed();//string
Comparator<Employee> employeeAgeComparator = Comparator.comparingInt(Employee::getAge);//int

Comparator<Employee> employee_Age_Name_Comparator
      = Comparator.comparing(Employee::getAge).thenComparing(Employee::getName);
Here the ordering will be done by age, and for the values with the same age, ordering will be done by name.

Comparator<Employee> employee_Name_Age_Comparator
      = Comparator.comparing(Employee::getName).thenComparingInt(Employee::getAge);
      
Arrays.sort(employees, employee_Comparator)

//here we need to sort a list of list on the basis of the third character of the inner list.
Collections.sort(g, Comparator.comparing(x->x.get(2)));

//here we didn't use getters and setters. Simply used lambda function
Arrays.sort(jobs, Comparator.ComparingInt(a -> a.e));

sorting of primitive type ie int does not take up a comparator.
so to convert primitive type to reference type use:
Integer[] a =Arrays.stream(arr).boxed().toArray(Integer[]::new);

Arrays.stream(arr).forEach(a -> Arrays.fill(a, 0));

When ever we need to use mod do: int mod = (int)Math.pow(10, 9) + 7;

To convert char array ch to string, use
String str = new String(ch);
String str2 = String.valueOf(ch);

Whenever comparing two integers from an arraylist do this a.get(i).equals(a.get(j)) otherwise it will compare object
addresses

Custom comparators:
Collections.sort(a, new CustomComp());
class CustomComp implements Comparator<Integer> {
    public int compare(Integer a, Integer b){
        String x=a+""+b;
        String y=b+""+a;
        return -x.compareTo(y);
    }
}

for-each and collections:
At the time of looping through collections using for each, we cannot remove any entry from it. In order to do so either
traverse through for(int i...) or in case of a map, create a new map for modified value and delete the previous one.

Java LinkedHashMap get first or last entry, The quickest way to get the "first" entry is still entrySet().iterator().next()

displaying through Iterator:
Iterator value = queue.iterator();
System.out.println("The iterator values are: ");
while (value.hasNext()) {
    System.out.println(value.next());
}

Generating random elements:
Random random=new Random();
int rint = random.nextInt(5); //generates random no from 0-5;
double rdouble = nextDouble();  //generates from 0.0-1.0

Character functions:
    Character.isLetterOrDigit();
    Character.isLetter();
    Character.isDigit();
    Character.toLowerCase();
    Character.toUpperCase();
    Character.isWhitespace();

String Functions:
    O(1)
    s.charAt(1);
    s.length();

    O(n)
    s.equals(s2);
    s.compareTo(s2);
    s.toLowerCase();
    s.toUpperCase();
    s.isWhitespace();
    s.trim()

    O(b-a) ie O(n)
    s.substring(a,b);

    String.split(regex);
    String.join(delimiter, Collection/Array);

StringBuilder functions:
    O(1)
    sb.charAt(0);

    O(n)
    sb.append("a");
    sb.reverse();
    sb.delete(0,5);
    sb.substring();
